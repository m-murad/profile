// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/geoip/geoip.proto

/*
Package geoip is a generated protocol buffer package.

It is generated from these files:
	proto/geoip/geoip.proto

It has these top-level messages:
	GetGeoDataByIPRequest
	GetGeoDataByIPResponse
*/
package geoip

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetGeoDataByIPRequest struct {
	IP string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
}

func (m *GetGeoDataByIPRequest) Reset()                    { *m = GetGeoDataByIPRequest{} }
func (m *GetGeoDataByIPRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGeoDataByIPRequest) ProtoMessage()               {}
func (*GetGeoDataByIPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetGeoDataByIPRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type GetGeoDataByIPResponse struct {
	IP          string  `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	CountryCode string  `protobuf:"bytes,2,opt,name=CountryCode" json:"CountryCode,omitempty"`
	CountryName string  `protobuf:"bytes,3,opt,name=CountryName" json:"CountryName,omitempty"`
	City        string  `protobuf:"bytes,4,opt,name=City" json:"City,omitempty"`
	ZipCode     string  `protobuf:"bytes,5,opt,name=ZipCode" json:"ZipCode,omitempty"`
	TimeZone    string  `protobuf:"bytes,6,opt,name=TimeZone" json:"TimeZone,omitempty"`
	Latitude    float32 `protobuf:"fixed32,7,opt,name=Latitude" json:"Latitude,omitempty"`
	Longitude   float32 `protobuf:"fixed32,8,opt,name=Longitude" json:"Longitude,omitempty"`
	MetroCode   uint64  `protobuf:"varint,9,opt,name=MetroCode" json:"MetroCode,omitempty"`
	RegionCode  string  `protobuf:"bytes,10,opt,name=RegionCode" json:"RegionCode,omitempty"`
	RegionName  string  `protobuf:"bytes,11,opt,name=RegionName" json:"RegionName,omitempty"`
}

func (m *GetGeoDataByIPResponse) Reset()                    { *m = GetGeoDataByIPResponse{} }
func (m *GetGeoDataByIPResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGeoDataByIPResponse) ProtoMessage()               {}
func (*GetGeoDataByIPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetGeoDataByIPResponse) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *GetGeoDataByIPResponse) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *GetGeoDataByIPResponse) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *GetGeoDataByIPResponse) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *GetGeoDataByIPResponse) GetZipCode() string {
	if m != nil {
		return m.ZipCode
	}
	return ""
}

func (m *GetGeoDataByIPResponse) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

func (m *GetGeoDataByIPResponse) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GetGeoDataByIPResponse) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GetGeoDataByIPResponse) GetMetroCode() uint64 {
	if m != nil {
		return m.MetroCode
	}
	return 0
}

func (m *GetGeoDataByIPResponse) GetRegionCode() string {
	if m != nil {
		return m.RegionCode
	}
	return ""
}

func (m *GetGeoDataByIPResponse) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

func init() {
	proto.RegisterType((*GetGeoDataByIPRequest)(nil), "geoip.GetGeoDataByIPRequest")
	proto.RegisterType((*GetGeoDataByIPResponse)(nil), "geoip.GetGeoDataByIPResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Geoip service

type GeoipClient interface {
	GetGeoDataByIP(ctx context.Context, in *GetGeoDataByIPRequest, opts ...grpc.CallOption) (*GetGeoDataByIPResponse, error)
}

type geoipClient struct {
	cc *grpc.ClientConn
}

func NewGeoipClient(cc *grpc.ClientConn) GeoipClient {
	return &geoipClient{cc}
}

func (c *geoipClient) GetGeoDataByIP(ctx context.Context, in *GetGeoDataByIPRequest, opts ...grpc.CallOption) (*GetGeoDataByIPResponse, error) {
	out := new(GetGeoDataByIPResponse)
	err := grpc.Invoke(ctx, "/geoip.Geoip/GetGeoDataByIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Geoip service

type GeoipServer interface {
	GetGeoDataByIP(context.Context, *GetGeoDataByIPRequest) (*GetGeoDataByIPResponse, error)
}

func RegisterGeoipServer(s *grpc.Server, srv GeoipServer) {
	s.RegisterService(&_Geoip_serviceDesc, srv)
}

func _Geoip_GetGeoDataByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeoDataByIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoipServer).GetGeoDataByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geoip.Geoip/GetGeoDataByIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoipServer).GetGeoDataByIP(ctx, req.(*GetGeoDataByIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Geoip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geoip.Geoip",
	HandlerType: (*GeoipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGeoDataByIP",
			Handler:    _Geoip_GetGeoDataByIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/geoip/geoip.proto",
}

func init() { proto.RegisterFile("proto/geoip/geoip.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x6a, 0xb3, 0x40,
	0x14, 0x85, 0x7f, 0xfd, 0x63, 0x12, 0x6f, 0x20, 0x8b, 0x0b, 0x6d, 0x87, 0x90, 0x16, 0x71, 0x53,
	0x57, 0x29, 0xb4, 0x6f, 0x50, 0x0b, 0x22, 0xa4, 0xad, 0x48, 0x17, 0x25, 0x3b, 0x4b, 0x2e, 0x32,
	0x8b, 0x78, 0xad, 0x8e, 0x0b, 0x5f, 0xb2, 0xcf, 0x54, 0xbc, 0xd2, 0x68, 0x42, 0xbb, 0x11, 0xcf,
	0xf7, 0x1d, 0x1c, 0x9c, 0x03, 0x57, 0x65, 0xc5, 0x86, 0xef, 0x72, 0x62, 0x5d, 0xf6, 0xcf, 0x8d,
	0x10, 0x74, 0x24, 0xf8, 0xb7, 0x70, 0x11, 0x91, 0x89, 0x88, 0x9f, 0x32, 0x93, 0x3d, 0xb6, 0x71,
	0x92, 0xd2, 0x67, 0x43, 0xb5, 0xc1, 0x25, 0xd8, 0x71, 0xa2, 0x2c, 0xcf, 0x0a, 0xdc, 0xd4, 0x8e,
	0x13, 0xff, 0xcb, 0x86, 0xcb, 0xf3, 0x66, 0x5d, 0x72, 0x51, 0xd3, 0x79, 0x15, 0x3d, 0x58, 0x84,
	0xdc, 0x14, 0xa6, 0x6a, 0x43, 0xde, 0x93, 0xb2, 0x45, 0x8c, 0xd1, 0xa8, 0xf1, 0x92, 0x1d, 0x48,
	0xfd, 0x3f, 0x69, 0x74, 0x08, 0x11, 0x26, 0xa1, 0x36, 0xad, 0x9a, 0x88, 0x92, 0x77, 0x54, 0x30,
	0xdb, 0xe9, 0x52, 0xbe, 0xe9, 0x08, 0xfe, 0x89, 0xb8, 0x82, 0xf9, 0x9b, 0x3e, 0xd0, 0x8e, 0x0b,
	0x52, 0x53, 0x51, 0xc7, 0xdc, 0xb9, 0x6d, 0x66, 0xb4, 0x69, 0xf6, 0xa4, 0x66, 0x9e, 0x15, 0xd8,
	0xe9, 0x31, 0xe3, 0x1a, 0xdc, 0x2d, 0x17, 0x79, 0x2f, 0xe7, 0x22, 0x07, 0xd0, 0xd9, 0x67, 0x32,
	0x15, 0xcb, 0x89, 0xae, 0x67, 0x05, 0x93, 0x74, 0x00, 0x78, 0x03, 0x90, 0x52, 0xae, 0xb9, 0x10,
	0x0d, 0x72, 0xea, 0x88, 0x0c, 0x5e, 0x7e, 0x71, 0x31, 0xf6, 0x1d, 0xb9, 0x7f, 0x07, 0x27, 0xea,
	0x26, 0xc0, 0x57, 0x58, 0x9e, 0x5e, 0x2c, 0xae, 0x37, 0xfd, 0x52, 0xbf, 0x2e, 0xb3, 0xba, 0xfe,
	0xc3, 0xf6, 0x6b, 0xf8, 0xff, 0x3e, 0xa6, 0xb2, 0xf0, 0xc3, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x30, 0x14, 0x64, 0xe9, 0xfc, 0x01, 0x00, 0x00,
}
